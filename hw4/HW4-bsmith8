Bradford Smith (bsmith8)
CS 615 HW 4 tcpdump DNS
03/16/2018
------------------------

Part 1: traceroute
==================

I began by recording a typescript log (with timing information) of the session
in case I needed to compare timestamps for when traceroutes were run. These can
be viewed in the included `traceroutes.typescript` and `traceroutes.timing`
files. Then while capturing all but port 22 (ssh) traffic with tcpdump I ran
each of the traceroutes in the assignment. I ended the tcpdump and the
typescript and shutdown the AWS instance as we did in the in-class example.

To view only ICMP and UDP packets I used the command:
    `tcpdump -t -n -r <file> udp or icmp`

I went through this output with the typescript replay of the traceroute and
identified which packets were which by referencing IP addresses.

The trimmed and formatted tcpdump output for the traceroute to: "www.hawaii.edu"
can be found in the included file `hawaii.traceroute`. I selected Hawaii because
it was an interesting traceroute. It was one of a few that never seemed to find
the end, after 20 hops the rest did not respond. Navigating a browser to
"www.hawaii.edu" still showed a web page, so the servers in the last legs of the
traceroute must either be configured not to respond to traceroute or are
improperly configured.

Another thing I found interesting when going through the output to format it
nicely was that the ICMP responses from each of the hops come in out of order
and (as a result) must be re-ordered by traceroute according to their TTLs.
However the reverse DNS requests for each of the hops is done in order, so this
must be done after traceroute as figured out what order the hosts are in.

Visual Traceroutes
------------------

www.stevens.edu
Visual Traceroute
    The traceroute starts in Washington state, crosses to the Eastern US, then
    crosses back to San Jose, California before crossing back and reaching
    Stevens. This was interesting.
Traceroute on a Map
    The traceroute starts in Germany, and gets stuck there? For some reason when
    I'm running this it seems content to end the traceroute at some IP in
    Frankfurt Germany (104.16.126.51). This is puzzling, maybe the link from
    there to Stevens is down right now?

www.uni-marburg.de
Visual Traceroute
    The traceroute starts in Washington state, crosses to the Eastern US, makes
    a jump to Colorado, then California, then instantly to Germany (I guess by
    satellite?). Then seems to take a sensible path through Germany. Nothing too
    unusual here.
Traceroute on a Map
    This tool starts in Germany so it makes a fairly quick trip in a sensible
    enough looking path.

www.uba.ar
Visual Traceroute
    The traceroute starts in Washington state, crosses to the Eastern US where
    it moves north and south a bit before settling in Florida. The rest of the
    traceroute is "no response" so that is where it ends.
Traceroute on a Map
    The traceroute starts in Germany and then doesn't even move. It seems that
    it searches for a link (maybe satellite?) but then gets no response and
    ends.

www.hawaii.edu
Visual Traceroute
    Although it didn't place map points, this again starts in the Western US and
    crosses to the Eastern US before jumping from the New Jersey area to Hawaii.
    It seems strange that the traceroute wouldn't go to Hawaii from California,
    but then again it's strange that all the traceroutes from this tool go from
    Western US to Eastern US almost all the time. I guess the fastest link to
    anywhere from the West coast is the East coast.
Traceroute on a Map
    This one was interesting, the traceroute jumped to a few points in Germany,
    then jumped up to Sweden, tried a few points there and eventually ended in
    Stockholm. I'm starting to wonder if Europe is having trouble reaching the
    US right now, although trying www.google.com does show the traceroute
    hitting California, interesting.

www.hku.hk
Visual Traceroute
    This starts in Washington, makes it's usual jump to the Eastern US and then
    a hop in Kansas before jumping to Japan (by way of China?), then back to
    China and then to New Zealand and back to China before ending with no
    responses somewhere. The jump to New Zealand makes no sense to me,
    especially after it had already reached Japan and China.
Traceroute on a Map
    Starting from Germany the traceroute moves around the country (I guess to
    where a main link is) then immediately to China (Hong Kong), but jumps over
    to Japan and back before moving further into Hong Kong and eventually
    getting no response. Again the jump to Japan is weird (maybe it shares part
    of an IP range with Hong Kong?).

www.du.ac.in
Visual Traceroute
    This one moves from Washington to the East coast where it then jumps to the
    UK (this is probably Trans-Atlantic cable) moves north in the UK then jumps
    to India (I'm guessing satellite because there were no other hops) and dies
    with no responses. This one was very straight-forward and makes sense.
Traceroute on a Map
    Starting from Germany the traceroute went first to London, then straight to
    India similar to what was seen in the last traceroute, although it skipped
    the northern portion of the UK.

www.usyd.edu.au
Visual Traceroute
    From Washington state the traceroute went to the Eastern US where it made
    the jump to Eastern Australia then moved into the center of the continent
    and then reaching it's destination. This one also presents no surprises.
Traceroute on a Map
    Starting in Germany the traceroute eventually jumps to Colorado and seems
    content stopping there. This looks to be a case of a broken link similar to
    the traceroute to Stevens and Hawaii on this tool.


Part 2: DNS tracing
===================

Setting up DNS Server
---------------------

In order to setup the DNS server I created my first instance of ami-628ad918 and
checked if `bind` was installed, since it wasn't installed I used `apt` to get
`bind9`. I followed along with the tldp.org tutorial
(www.tldp.org/HOWTO/DNS-HOWTO-3.HTML) in the assignment to make sure that bind
was installed properly.

The configuration files were not the same as the tutorial (I didn't expect them
to be, as the tutorial mentioned Debian potato). Key differences noted in
configuration:

    - directory is /var/cache/bind/ not /var/named/
    - root zone is in /etc/bind/db.root not root.hints
    - localhost zone configuration is different and can be found in
        - /etc/bind/db.local (local loopback)
        - /etc/bind/db.127 (local loopback)
        - /etc/bind/db.0 (broadcast)
        - /etc/bind/db.255 (broadcast)
    - db.root was formatted differently but contained the same IP address for
      the root servers

Then I added "nameserver 127.0.0.1" to /etc/resolv.conf and removed the internal
AWS "domain", "search" and "nameserver" lines. Then I used `top` to determine if
the system was using systemd or init.d and found that systemd was running. So I
started bind9 by using `sudo systemctl start bind9.service`.

I tried to use `dig` to verify that it was working but didn't have it installed,
I also tried `nslookup` but that wasn't installed either. So I installed the
package dnsutils (successfully, which probably also verified that it was
working) and ran `dig -x 127.0.0.1` and saw a response from localhost giving a
PTR? record named "localhost".

(1) DNS Server Telnet
---------------------

I needed to install `telnet`, and did so with `apt`. Then I ran the telnet
command to fetch the index at www.yahoo.com.

Trimmed, formatted and annotated tcpdump output for this request can be found in
the included `yahoo.telnet` file.

Setup DNS Client
----------------

In order to setup the DNS client I created my second instance of ami-628ad918. I
edited the /etc/resolv.conf to have only "nameserver <server>" where <server> is
the IP address of my DNS server instance. I then tried to verify that this
worked but failed to resolve a name (google.com). Then remembered that I
probably needed to open port 53 on my DNS server.

I checked on the DNS server using `netstat -an` and found that so far it was
only listening on local interfaces. So I added "listen-on { any; };" to the
options section of the bind config and restarted the service. This still didn't
work so I checked the systemd journal with `sudo journalctl -u bind9` and found
that the client queries were being recieved but denied. After searching this I
found I had to also add an allow-query option to bind, ("allow-query { any; };")
although in practice any would ideally be replaced with a network that the DNS
server will serve or at least be shielded from the Internet by a rate-limiter of
some sort. After adding both those options to bind9 and restarting the service
the client instance was able to resolve names using the DNS server instance.

(2) DNS Client Telnet
---------------------

I again needed to install `telnet` before I was able to run the command to
telnet www.twitter.com.

TODO

(3) DNS Server Reverse Lookup
-----------------------------

I ran the reverse lookup using `dig -x 199.233.217.205`.

TODO
